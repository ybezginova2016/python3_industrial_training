def myfunc(n):
    return lambda a: a ** 2

mydoubler = myfunc(2)

print(mydoubler(11))
#####################
is_even_list = [lambda arg=x: arg * 10 for x in range(1, 5)]

# iterate on each lambda function
for item in is_even_list:
    print(item())

print([(lambda arg=x: arg * 10)() for x in range(1, 5)])

#####################

Max = lambda a, b : a if(a > b) else b
print(Max)

#####################
li = [8, 4, 2, 123, 454]
final_list = list(filter(lambda x: (x % 2 == 0), li))
# we should convert the filter function to the list.
# Otherwise, it returns the memory object
print(final_list)

#####################

ages = [14, 35, 2343, 23, 12, 6]
adults = list(filter(lambda age: age > 18, ages))

# filter function searches for function in the list

print(adults)

#####################

li = [8, 4, 2, 123, 454, -11, 0, 423, -34619674]

final_output = list(map(lambda x: x*2, li))
print(final_output)

"""
The map() function is a built-in Python function that applies a given function to each element of an iterable (such as a list, tuple, or set) and returns a new iterable containing the results.

In the code you provided, map() is used to create a new list that contains each element of li multiplied by 2. Here's how the code works:

map() takes two arguments: a function to apply to the elements of the iterable, and the iterable to apply the function to. In this case, the function is defined as lambda x: x * 2, which takes a single argument x and returns its double. The iterable is the list li, which contains integers.
map() applies the function to each element of li in turn, and generates a new iterable that contains the results. Specifically, it applies the function to 8 and returns 16, then applies the function to 4 and returns 8, and so on for each element of li.
The list() function is used to convert the iterable generated by map() into a list, which is stored in the variable final_output.
Finally, the print() function is used to output the value of final_output to the console.
"""
#####################

from functools import reduce
li = [8, 4, 2, 123, 454, -11, 0, 423, -34]

sum = reduce((lambda x, y: x + y), li)
print(sum)

"""
The reduce() function from the functools module applies a function to a sequence of values and returns a single aggregated value. In this code, reduce() is used to compute the sum of all the values in the li list.

Here's how the code works:

reduce() takes two arguments: a function to apply to the values and a sequence of values to aggregate. In this case, the function is defined as lambda x, y: x + y, which adds two values x and y and returns the result. The sequence of values is the list li, which contains integers.
reduce() applies the function to the first two values in the list (8 and 4), which yields a result of 12. It then applies the function to this result and the next value in the list (12 and 2), which yields a result of 14. This process continues until the function has been applied to all the values in the list.
The final result of the reduce() function is the aggregated value obtained by applying the function to all the values in the list. In this case, the final result is the sum of all the values in the list, which is stored in the variable sum.
Finally, the print() function is used to output the value of sum to the console.
"""

